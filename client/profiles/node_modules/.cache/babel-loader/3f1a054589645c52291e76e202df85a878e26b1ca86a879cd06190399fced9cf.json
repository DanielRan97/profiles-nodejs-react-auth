{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\danie\\\\Desktop\\\\dev\\\\fullStack\\\\trainig\\\\fullstack\\\\profiles\\\\client\\\\profiles\\\\src\\\\contexts\\\\authContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from \"react\";\nimport { register, login, isTokenValid } from \"../axios/auth\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [userData, setUserData] = useState(null);\n  useEffect(() => {\n    const checkToken = async () => {\n      const token = localStorage.getItem(\"profilesAuthToken\");\n      if (token) {\n        try {\n          const isValid = await isTokenValid(); // Validate the token on the server\n          if (isValid) {\n            setIsLoggedIn(true);\n            setUserData(isValid.user); // Assuming the server returns user data\n            console.log(isValid.user);\n          } else {\n            handleLogout(); // Logout if token is invalid\n          }\n        } catch (error) {\n          console.error(\"Token validation failed:\", error.message);\n          handleLogout();\n        }\n      }\n    };\n    checkToken();\n  }, []);\n  const authContextRegister = async user => {\n    setIsLoggedIn(false);\n    try {\n      await register(user);\n      console.log(\"Registered successfully!\");\n    } catch (error) {\n      console.error(\"Registration error:\", error.message);\n      setIsLoggedIn(false);\n      throw error;\n    }\n  };\n  const authContextLogin = async user => {\n    setIsLoggedIn(false);\n    try {\n      const res = await login(user);\n      console.log(\"Logged in successfully!\");\n      setIsLoggedIn(true);\n      setUserData(res.user);\n      console.log(user);\n    } catch (error) {\n      console.error(\"Login error:\", error.message);\n      setIsLoggedIn(false);\n      throw error;\n    }\n  };\n  const handleLogout = () => {\n    localStorage.removeItem(\"profilesAuthToken\");\n    setIsLoggedIn(false);\n    setUserData(null);\n    console.log(\"Logged Out!!\");\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isLoggedIn,\n      authContextLogin,\n      authContextRegister,\n      authContextLogout: handleLogout,\n      userData\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"I16q87cSJph7GkfKlBEj9Tur3P8=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","register","login","isTokenValid","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","isLoggedIn","setIsLoggedIn","userData","setUserData","checkToken","token","localStorage","getItem","isValid","user","console","log","handleLogout","error","message","authContextRegister","authContextLogin","res","removeItem","Provider","value","authContextLogout","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/danie/Desktop/dev/fullStack/trainig/fullstack/profiles/client/profiles/src/contexts/authContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from \"react\";\r\nimport { register, login, isTokenValid } from \"../axios/auth\";\r\n\r\nexport const AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n  const [userData, setUserData] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const checkToken = async () => {\r\n      const token = localStorage.getItem(\"profilesAuthToken\");\r\n      if (token) {\r\n        try {\r\n          const isValid = await isTokenValid(); // Validate the token on the server\r\n          if (isValid) {\r\n            setIsLoggedIn(true);\r\n            setUserData(isValid.user); // Assuming the server returns user data\r\n            console.log(isValid.user);\r\n          } else {\r\n            handleLogout(); // Logout if token is invalid\r\n          }\r\n        } catch (error) {\r\n          console.error(\"Token validation failed:\", error.message);\r\n          handleLogout();\r\n        }\r\n      }\r\n    };\r\n\r\n    checkToken();\r\n  }, []);\r\n\r\n  const authContextRegister = async (user) => {\r\n    setIsLoggedIn(false);\r\n    try {\r\n      await register(user);\r\n      console.log(\"Registered successfully!\");\r\n    } catch (error) {\r\n      console.error(\"Registration error:\", error.message);\r\n      setIsLoggedIn(false);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const authContextLogin = async (user) => {\r\n    setIsLoggedIn(false);\r\n    try {\r\n      const res = await login(user);\r\n      console.log(\"Logged in successfully!\");\r\n      setIsLoggedIn(true);\r\n      setUserData(res.user);\r\n      console.log(user);\r\n    } catch (error) {\r\n      console.error(\"Login error:\", error.message);\r\n      setIsLoggedIn(false);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const handleLogout = () => {\r\n    localStorage.removeItem(\"profilesAuthToken\");\r\n    setIsLoggedIn(false);\r\n    setUserData(null);\r\n    console.log(\"Logged Out!!\");\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider\r\n      value={{\r\n        isLoggedIn,\r\n        authContextLogin,\r\n        authContextRegister,\r\n        authContextLogout: handleLogout,\r\n        userData,\r\n      }}\r\n    >\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}